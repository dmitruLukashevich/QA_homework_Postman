{
	"info": {
		"_postman_id": "12c82700-8a07-4ca7-835b-e3a3900882e4",
		"name": "Homework_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18268180"
	},
	"item": [
		{
			"name": "First_request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let dataFromJson = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name in response:\", function () {\r",
							"    pm.expect(dataFromJson.name).to.deep.equal('Dima');\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age in response:\",function(){\r",
							"    pm.expect(dataFromJson.age).to.deep.equal('31')\r",
							"})\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary in response:\", function(){\r",
							"    pm.expect(dataFromJson.salary).to.deep.equal(1000);\r",
							"})\r",
							"\r",
							"//7. Спарсить request.\r",
							"\r",
							"let parseRequest = request.data;\r",
							"console.log(parseRequest);\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name in response == name from request \", function(){\r",
							"    pm.expect(dataFromJson.name).to.deep.equal(request.data.name);\r",
							"})\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"age in response == age from request\", function(){\r",
							"    pm.expect(dataFromJson.age).to.deep.equal(request.data.age);\r",
							"})\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary in response == salary from request\", function(){\r",
							"    pm.expect(dataFromJson.salary).to.deep.equal(+request.data.salary); // '+' приводит к числу \r",
							"})\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(dataFromJson.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"salary_1_5_year in response == salary*4 from request\", function(){\r",
							"    pm.expect(dataFromJson.family.u_salary_1_5_year).to.deep.equal(request.data.salary*4); \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dima",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"//4. Спарсить request.\r",
							"let parseRequest = request.data;\r",
							"console.log(parseRequest);\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name in response == name from request\", function(){\r",
							"    pm.expect(jsonData.name).to.deep.equal(parseRequest.name);\r",
							"})\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age in response == age in request\", function(){\r",
							"    pm.expect(jsonData.age).to.deep.equal(parseRequest.age);\r",
							"})\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary in response == salary from request\", function(){\r",
							"    pm.expect(jsonData.salary).to.deep.equal(+parseRequest.salary);\r",
							"})\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has property name\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('name');\r",
							"    })\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.    \r",
							"pm.test(\"Dog has property age\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('age');\r",
							"})\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog name is Luky\",function(){\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.deep.equal('Luky');\r",
							"})\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dogs age is 4\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.deep.equal(4);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dima",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Dima&age=31&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Dima"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let parseRequest = pm.request.url.query.toObject()\r",
							"console.log(parseRequest);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name in response == name from request\", function(){\r",
							"    pm.expect(jsonData.name).to.deep.equal(parseRequest.name);\r",
							"})\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age in response == age from request\", function(){\r",
							"    pm.expect(jsonData.age).to.deep.equal(+parseRequest.age);\r",
							"})\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"let requestSalary = parseRequest.salary;\r",
							"console.log(requestSalary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let responseSalary = jsonData.salary;\r",
							"console.log(responseSalary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response."
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Dzmitry&age=31&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Dzmitry"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		}
	]
}