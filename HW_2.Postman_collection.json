{
	"info": {
		"_postman_id": "12c82700-8a07-4ca7-835b-e3a3900882e4",
		"name": "Homework_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18268180"
	},
	"item": [
		{
			"name": "First_request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let dataFromJson = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name in the response:\", function () {\r",
							"    pm.expect(dataFromJson.name).to.deep.equal('Dima');\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age in the response:\",function(){\r",
							"    pm.expect(dataFromJson.age).to.deep.equal('31')\r",
							"})\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary in the response:\", function(){\r",
							"    pm.expect(dataFromJson.salary).to.deep.equal(1000);\r",
							"})\r",
							"\r",
							"//7. Спарсить request.\r",
							"let parseRequest = request.data;\r",
							"console.log(parseRequest);\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name in the response == name in the request \", function(){\r",
							"    pm.expect(dataFromJson.name).to.deep.equal(request.data.name);\r",
							"})\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age in the response == age in the request\", function(){\r",
							"    pm.expect(dataFromJson.age).to.deep.equal(request.data.age);\r",
							"})\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary in the response == salary in the request\", function(){\r",
							"    pm.expect(dataFromJson.salary).to.deep.equal(+request.data.salary); // '+' приводит к числу \r",
							"})\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(dataFromJson.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"salary_1_5_year in the response == salary*4 ib the request\", function(){\r",
							"    pm.expect(dataFromJson.family.u_salary_1_5_year).to.deep.equal(request.data.salary*4); \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dima",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"//4. Спарсить request.\r",
							"let parseRequest = request.data;\r",
							"console.log(parseRequest);\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name in the response == name in the request\", function(){\r",
							"    pm.expect(jsonData.name).to.deep.equal(parseRequest.name);\r",
							"})\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age in the response == age in the request\", function(){\r",
							"    pm.expect(jsonData.age).to.deep.equal(parseRequest.age);\r",
							"})\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary in the response == salary in the request\", function(){\r",
							"    pm.expect(jsonData.salary).to.deep.equal(+parseRequest.salary);\r",
							"})\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has property name\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('name');\r",
							"    })\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.    \r",
							"pm.test(\"Dog has property age\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('age');\r",
							"})\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog name is Luky\",function(){\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.deep.equal('Luky');\r",
							"})\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dogs age is 4\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.deep.equal(4);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dima",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Dima&age=31&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Dima"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let parseRequest = pm.request.url.query.toObject()\r",
							"console.log(parseRequest);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name in the response == name in the request\", function(){\r",
							"    pm.expect(jsonData.name).to.deep.equal(parseRequest.name);\r",
							"})\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age in the response == age in the request\", function(){\r",
							"    pm.expect(jsonData.age).to.deep.equal(+parseRequest.age);\r",
							"})\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"let requestSalary = parseRequest.salary;\r",
							"console.log(requestSalary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let responseSalary = jsonData.salary;\r",
							"console.log(responseSalary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary[0] in the response == salary i the request\", function(){\r",
							"    pm.expect(jsonData.salary[0]).to.deep.equal(+parseRequest.salary);\r",
							"} )\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary[0] in the response == salary i the request\", function(){\r",
							"    pm.expect(+jsonData.salary[1]).to.deep.equal(parseRequest.salary*2);\r",
							"} )\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary[0] in the response == salary i the request\", function(){\r",
							"    pm.expect(+jsonData.salary[2]).to.deep.equal(parseRequest.salary*3);\r",
							"} )\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", parseRequest.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", parseRequest.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", parseRequest.salary);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"jsonData.salary.forEach(function(sal){\r",
							"       console.log(\"result: \" + sal);\r",
							"   });\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Dzmitry&age=31&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Dzmitry"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"console.log(jsonData);\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let reqParse = request.data;\r",
							"console.log(reqParse);\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Json pesponse has start_qa_salary\", function(){\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"})\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Json pesponse has qa_salary_after_6_months\", function(){\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"})\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Json pesponse has qa_salary_after_12_months\", function(){\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"})\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Json pesponse has qa_salary_after_1.5_year\", function(){\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"})\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Json pesponse has qa_salary_after_3.5_years\", function(){\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"})\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Json pesponse has person\", function(){\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"})\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test( \"Start_qa_salary in the pesponse = salary in the request \", function(){\r",
							"    pm.expect(jsonData.start_qa_salary).to.deep.equal(+reqParse.salary);\r",
							"})\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test( \"Qa_salary_after_6_months in the pesponse = salary*2 in the request \", function(){\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.deep.equal(reqParse.salary*2);\r",
							"})\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test( \"Qa_salary_after_12_months in the pesponse = salary*2.7 in the request \", function(){\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.deep.equal(reqParse.salary*2.7);\r",
							"})\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test( \"Qa_salary_after_1.5_year in the pesponse = salary*3.3 in the request \", function(){\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.deep.equal(reqParse.salary*3.3);\r",
							"})\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test( \"Qa_salary_after_3.5_years in the pesponse = salary*3.8 in the request \", function(){\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.deep.equal(reqParse.salary*3.8);\r",
							"})\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Person.u_name[1] in the response = salary in the request\", function(){\r",
							"    pm.expect(jsonData.person.u_name[1]).to.deep.equal(+reqParse.salary);\r",
							"})\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Person.u_age in the response = age in the request\", function(){\r",
							"    pm.expect(jsonData.person.u_age).to.deep.equal(+reqParse.age);\r",
							"})\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Person.u_salary_5_years in the response = salary*4.2 in the request\", function(){\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.deep.equal(reqParse.salary*4.2);\r",
							"})\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let personKey in jsonData.person) {\r",
							"    console.log(personKey + ': ' + jsonData.person[personKey])\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dzmitry",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}